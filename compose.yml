# services:
  # nextapp:
  #   container_name: nextapp
  #   build:
  #     context: .
  #     dockerfile: next.dockerfile
  #   ports:
  #     - 3000:3000
  #   environment:
  #     - MONGO_URI=${MONGO_URI}
  #   depends_on:
  #     - mongo
  # mongo:
  #   image: mongo:7.0
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - ./mongodata:/data/db

#------------------------------------
# specify the version of docker-compose
version: '3.8'

# define the services to be run
services:
  # define the web service for next.js app.
  web:
    # we use depends_on to specify that service depends on another service
    # in this case, we specify that the web depends on the mongo service
    # this means that the mongo service will be started before the web service
    depends_on:
      - mongo

    # specify the environment variables for the web service
    # these environment variables will be available inside the container
    environment:
      - MONGO_URI=${MONGO_URI}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

    # specify the build context for the web service
    # this is the directory where the Dockerfile for the web service is located
    build:
      context: .
      dockerfile: dev.dockerfile

    # specify the ports to expose for the web service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports:
      - 3000:3000

    # this is for docker compose watch mode
    # anything mentioned under develop will be watched for changes by docker compose watch
    # and it will perform the action mentioned
    develop:
      # we specify the files to watch for changes
      watch:
        - path: ./package.json
          action: rebuild
        - path: ./next.config.js
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
          # it'll watch for changes in the frontend directory and sync the changes with the container real time
        - path: .
          target: /app
          action: sync

  # define the db service
  mongo:
    # specify the image to use for the db service from docker hub.
    image: mongo
    # specify the ports to expose for the db service
    ports:
      - 27017:27017

    # specify the volumes to mount for the db service
    # we're mounting the volume named "amazona" inside the container at /data/db directory
    # this is done so that the data inside the mongodb container is persisted even if the container is stopped
    volumes:
      - amazona:/data/db

# define the volumes to be used by the services
volumes:
  amazona:
